# Complete build and deploy workflow with separate jobs
# This is the recommended pattern for production deployments
name: Build and Deploy Android App

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      artifact-name: ${{ steps.build.outputs.artifact-name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make Gradle wrapper executable
        run: chmod +x ./gradlew

      - name: Build AAB
        id: build
        run: |
          ./gradlew bundleRelease
          echo "artifact-name=app-release-${{ github.run_number }}" >> $GITHUB_OUTPUT

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.artifact-name }}
          path: app/build/outputs/bundle/release/app-release.aab
          retention-days: 1

  # Separate job to prepare keystore (recommended approach)
  prepare-keystore:
    runs-on: ubuntu-latest
    outputs:
      keystore-artifact: ${{ steps.keystore.outputs.artifact-name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      # Example: Fetch keystore from your secure storage
      - name: Setup cloud credentials (if needed)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
        
      - name: Fetch and prepare keystore
        id: keystore
        run: |
          # Example: Download keystore from S3
          aws s3 cp s3://my-keystores/production-keystore.jks keystore.jks
          
          # Convert to base64 for secure transfer
          base64 -i keystore.jks > keystore.b64
          echo "artifact-name=keystore-${{ github.run_number }}" >> $GITHUB_OUTPUT
          
          # Clean up original file
          rm keystore.jks
        
      - name: Upload keystore artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.keystore.outputs.artifact-name }}
          path: keystore.b64
          retention-days: 1

  deploy:
    needs: [build, prepare-keystore]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.artifact-name }}
          path: ./build-artifacts

      - name: Download keystore artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.prepare-keystore.outputs.keystore-artifact }}
          path: ./keystore-artifacts

      - name: Prepare keystore for deployment
        id: prepare-keystore
        run: |
          KEYSTORE_BASE64=$(cat ./keystore-artifacts/keystore.b64)
          echo "KEYSTORE_BASE64=$KEYSTORE_BASE64" >> $GITHUB_ENV
          # Clean up keystore file
          rm -rf ./keystore-artifacts

      - name: Deploy to Indus Appstore
        uses: indusappstore/appstore-release@v1
        with:
          operation_mode: 'deploy_only'
          file_path: './build-artifacts/app-release.aab'
          file_type: 'aab'
          api_token: ${{ secrets.INDUS_APP_STORE_API_TOKEN }}
          
          # Use auto-detection for package name (recommended)
          auto_detect_package: 'true'
          
          # Use prepared keystore
          keystore_source: 'base64'
          keystore_base64: ${{ env.KEYSTORE_BASE64 }}
          keystore_password: ${{ secrets.KEYSTORE_PASSWORD }}
          key_alias: ${{ secrets.KEY_ALIAS }}
          key_password: ${{ secrets.KEY_PASSWORD }}
          
          # Security options
          keystore_validation: 'true'
  
            
      - name: Clean up environment
        if: always()
        run: |
          unset KEYSTORE_BASE64
          rm -rf ./build-artifacts
